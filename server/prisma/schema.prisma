generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  USER
}

// CREATED	Замовлення створене, але ще не оброблено
// PENDING	Очікує підтвердження або оплати
// CONFIRMED	Підтверджено (клієнтом або системою)
// PROCESSING	У процесі обробки
// INPROGRESS	Виконується
// SHIPPED	Відправлено
// DELIVERED	Доставлено
// CANCELLED	Скасовано користувачем або системою
// RETURNED	Товар повернуто
// FAILED	Помилка виконання (наприклад, оплати)
// REFUNDED	Гроші повернено
// ONHOLD	Призупинено з певної причини

enum Status {
  CREATED
  PENDING
  CONFIRMED
  PROCESSING
  INPROGRESS
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  FAILED
  REFUNDED
  ONHOLD
}

model Categories {
  id            Int        @id @default(autoincrement())
  category_name String
  description   String
  slug          String     @unique
  picture       String?
  isActive      Boolean    @default(true)
  products      Products[]

  @@map("categories")
}

model Products {
  id            Int            @id @default(autoincrement())
  product_name  String
  description   String
  slug          String         @unique
  price         Int
  discont_price Int
  in_stock      Int?
  isActive      Boolean        @default(true)
  category_id   Int
  orderDetails  OrderDetails[]
  category      Categories     @relation(fields: [category_id], references: [id])

  @@map("products")
}

model Customers {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  first_name    String
  last_name     String
  role          Roles           @default(USER)
  address       String?
  city          String?
  region        String?
  postal_code   String?
  country       String?
  phone         String?
  isActive      Boolean         @default(true)
  orders        Orders[]
  PasswordReset PasswordReset[]

  @@map("customers")
}

model Orders {
  id               Int            @id @default(autoincrement())
  ship_first_name  String
  ship_last_name   String
  ship_address     String
  ship_city        String
  ship_region      String
  ship_postal_code String
  ship_country     String
  phone            String
  status           Status
  customer_id      Int
  shipper_id       Int
  orderDetails     OrderDetails[]
  customer         Customers      @relation(fields: [customer_id], references: [id])
  shipper          Shippers       @relation(fields: [shipper_id], references: [id])

  @@map("orders")
}

model Shippers {
  id           Int      @id @default(autoincrement())
  company_name String
  phone        String
  isActive     Boolean  @default(true)
  Orders       Orders[]

  @@map("shippers")
}

model OrderDetails {
  order_id   Int
  product_id Int
  unit_price Int
  quantity   Int
  discount   Int
  order      Orders   @relation(fields: [order_id], references: [id])
  product    Products @relation(fields: [product_id], references: [id])

  @@id([order_id, product_id])
  @@map("orderDetails")
}

model PasswordReset {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int
  user      Customers @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime  @default(now())
}
