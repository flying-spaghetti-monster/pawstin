# version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      TZ: Europe/Kyiv
    ports:
      - '${DB_PORT}:5432'
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # for app
      - "15672:15672" # web interface
    restart: unless-stopped
    depends_on:
      - server 
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    env_file:
      - ./server/.env
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --bind 0.0.0.0
      --requirepass ${REDIS_PASSWORD}
      --save 60 1
      --loglevel warning
    volumes:
      - cache:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.1
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false #disable production
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - ELASTIC_PASSWORD=supersecret
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    depends_on:
      - postgres
    
  kibana:
    image: docker.elastic.co/kibana/kibana:9.1.1
    container_name: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
  server:
    container_name: server
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
    ports:
      - '3000:3000'
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    volumes:
      - ./server:/app
      - server_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/"]
      interval: 10s
      timeout: 5s
      retries: 5

  client:
    container_name: client
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - '${CLIENT_PORT}:5173'
    restart: unless-stopped
    depends_on:
      - server
      - postgres
    volumes:
      - ./client:/app
      - client_node_modules:/app/node_modules
    env_file:
      - .env
    environment:
      - VITE_API_URL=http://localhost:3000/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 3

  email-service:
    container_name: email-service
    build:
      context: ./email-service
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - rabbitmq
    restart: unless-stopped
    volumes:
      - ./email-service:/app
      - email_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  server_node_modules:
  client_node_modules:
  email_node_modules:
  postgres_data:
  rabbitmq_data:
  cache:
  es_data: